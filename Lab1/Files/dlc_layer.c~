/* ----- DO NOT REMOVE OR MODIFY ----- */
#include "cisePort.h"
#include "sim.h"
#include "component.h"
#include "comptypes.h"
#include "list.h"
#include "eventdefs.h"
#include "main.h"
#include "route_activity.h"
#include "sim_tk.h"
#include "dlc_layer.h"

/****************************************************/

static dlc_layer_receive(DLC_LAYER_ENTITY_TYPE *dlc_layer_entity,
                        GENERIC_LAYER_ENTITY_TYPE *generic_layer_entity,
                        PDU_TYPE *pdu)
{
    if (DatalinkFromApplication(generic_layer_entity)) {
        FromApplicationToDatalink(dlc_layer_entity, pdu);
    } else if (DatalinkFromPhysical(generic_layer_entity)) {
        FromPhysicalToDatalink(dlc_layer_entity, pdu);   
    }
   return 0;
}

/* ----- START HERE AND COMPLETE THE FOLLOWING TWO FUNCTIONS ----- */


FromApplicationToDatalink(DLC_LAYER_ENTITY_TYPE *dlc_layer_entity,
                   PDU_TYPE *pdu_from_application)
{
   PDU_TYPE *pdu_to_physical; /* use this with pdu_alloc() */ 

   // Just a sanity check
   if(pdu_from_application->type!=TYPE_IS_A_PDU) cse_panic("Empty a_pdu\n");

   // Create d_pdu using pdu_alloc()
   
   // update address field, a_pdu field and error field;     
   /* Send to physical layer; 
      Use something like this:

   send_pdu_to_application_layer(dlc_layer_entity,pdu_to_application);
   */
 
   /* Free a_pdu;
      Use something like this:

   pdu_free(pdu_from_application);
   */

   return 0;
}


FromPhysicalToDatalink(DLC_LAYER_ENTITY_TYPE *dlc_layer_entity,
                      PDU_TYPE *pdu_from_physical)
{
    PDU_TYPE * pdu_to_application;

   /* just a sanity check */ 
    if (pdu_from_physical->type != TYPE_IS_D_PDU) cse_panic("Empty d_pdu\n");
  
   /* 
      1. Check error and the address fields. 
      2. Send a_pdu to the application layer only if the d_pdu is error-free.
   */

   // Free d_pdu;

    return 0;
}

